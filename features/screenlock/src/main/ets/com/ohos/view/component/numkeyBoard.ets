/*
 * Copyright (c) 2021 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import Log from '../../../../../../../../../common/src/main/ets/default/Log'
import Constants from '../../common/constants'
import BaseViewModel from '../../vm/baseViewModel'
import deviceInfo from '@ohos.deviceInfo';

const TAG = 'ScreenLock-NumkeyBoard'

@Component
export default struct NumkeyBoard {
  private viewModel: BaseViewModel
  private onKeypress: (params, callback) => void;
  @StorageLink('numKeyboard') numKeyboard: any[]  = Constants.NUMKEY_BOARD;

  aboutToAppear() {
    Log.showInfo(TAG, `aboutToAppear`)
  }

  aboutToDisappear() {
    Log.showInfo(TAG, `aboutToDisappear`)
  }

  build() {
    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
      Grid() {
        ForEach(this.numKeyboard, (item: any) => {
          GridItem() {
            Stack({ alignContent: Alignment.Center }) {
              Column({ space: 0 }) {
                Flex({
                  direction: FlexDirection.Column,
                  alignItems: ItemAlign.Center,
                  justifyContent: FlexAlign.Center
                }) {
                  if (item.value == Constants.CALL_PHONE ||
                  item.value == Constants.GO_BACK ||
                  item.value == Constants.DEL_PWD) {
                    Text(item.row1)
                      .fontSize(deviceInfo.deviceType === 'tablet' ? $r('app.float.digitalpsd_prompt_fontsize') : 16)
                      .fontWeight(deviceInfo.deviceType === 'tablet' ? FontWeight.Bold : 'Medium')
                      .fontColor(Color.White)
                      .textAlign(TextAlign.Center)
                      .width(Constants.FULL_CONTAINER_WIDTH)
                      .lineHeight(deviceInfo.deviceType === 'tablet' ? Constants.FULL_CONTAINER_HEIGHT : 21)
                      .padding(0)
                      .margin(0)
                  } else {
                    Text(item.row1)
                      .fontSize(deviceInfo.deviceType === 'tablet' ? $r('app.float.digitalpsd_row1_fontsize') : 28)
                      .fontWeight(deviceInfo.deviceType === 'tablet' ? FontWeight.Bold : 'Medium')
                      .fontColor(Color.White)
                      .textAlign(TextAlign.Center)
                      .width(Constants.FULL_CONTAINER_WIDTH)
                      .lineHeight(deviceInfo.deviceType === 'tablet' ? Constants.FULL_CONTAINER_HEIGHT : 38)
                      .padding(0)
                      .margin(0)
                  }
                  if (!!item.row2) {
                    Text(item.row2)
                      .fontSize(deviceInfo.deviceType === 'tablet' ? $r('app.float.digitalpsd_row2_fontsize') : 12)
                      .fontWeight(deviceInfo.deviceType === 'tablet' ? FontWeight.Bold : 'Regular')
                      .fontColor(Color.White)
                      .opacity(deviceInfo.deviceType === 'tablet' ? 1 : 0.6)
                      .textAlign(TextAlign.Center)
                      .width(Constants.FULL_CONTAINER_WIDTH)
                      .padding(0)
                      .margin(0)
                  }
                }
                .width(deviceInfo.deviceType === 'tablet' ? Constants.FULL_CONTAINER_WIDTH : 98.75)
                .height(deviceInfo.deviceType === 'tablet' ? $r('app.float.digitalpsd_row_height') : 48)
              }

              if (deviceInfo.deviceType === 'tablet') {
                if (item.value == Constants.CALL_PHONE ||
                item.value == Constants.GO_BACK ||
                item.value == Constants.DEL_PWD) {
                  Column() {
                    Button({ type: ButtonType.Normal, stateEffect: true })
                      .backgroundColor("#00FFFFFF")
                      .width(Constants.DIGITALPSD_BUTTON_RECT_WH)
                      .height(Constants.DIGITALPSD_BUTTON_RECT_HH)
                  }
                } else {
                  Column() {
                    Button({ type: ButtonType.Circle, stateEffect: !this.viewModel.inhibitInput })
                      .backgroundColor("#00FFFFFF")
                      .width(Constants.DIGITALPSD_BUTTON_DIAMETER)
                      .height(Constants.DIGITALPSD_BUTTON_DIAMETER)
                  }
                }
              }
            }
            .onClick(() => {
              Log.showInfo(TAG, `onClick:${item.index}`)
              setTimeout(this.onKeypress.bind(this), 0, item.index, () => {
                Log.showInfo(TAG, `onClick callback is called`)
              });
            })
          }
        })
      }
      .columnsTemplate('1fr 1fr 1fr')
      .rowsTemplate('1fr 1fr 1fr 1fr')
      .rowsGap(deviceInfo.deviceType === 'tablet' ? 0 : 22)
      .width(deviceInfo.deviceType === 'tablet' ? Constants.FULL_CONTAINER_WIDTH : 312)
      .height(deviceInfo.deviceType === 'tablet' ? Constants.FULL_CONTAINER_HEIGHT : 288)
    }
    .width(Constants.FULL_CONTAINER_WIDTH)
    .height(Constants.FULL_CONTAINER_HEIGHT)
  }
}